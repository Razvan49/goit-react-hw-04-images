import { Component } from 'react';
import { Toaster } from 'react-hot-toast'; // pentru afiÈ™area mesajelor pop-up
import { ImageGallery } from './ImageGallery/ImageGallery';
import { getSearch } from 'api/getSearch'; // pentru obÈ›inerea datelor de cÄƒutare
import { Searchbar } from './Searchbar/Searchbar'; // bara de cÄƒutare
import { Button } from 'components/Button/Button';
import { Loader } from 'components/Loader/Loader'; // indicator de Ã®ncÄƒrcare
import { Modal } from './Modal/Modal';

export class App extends Component {
  state = {
    search: '',
    images: [],
    page: 1,
    total: 1,
    loading: false, // indicator pentru Ã®ncÄƒrcare
    error: null,
    showModal: false,
    empty: false, // indicator pentru rezultatele cÄƒutÄƒrii goale
  };

  componentDidUpdate(_, PrevState) {
    // VerificÄƒm dacÄƒ s-au modificat proprietÄƒÈ›ile search sau page.
    if (
      PrevState.search !== this.state.search ||
      PrevState.page !== this.state.page
    ) {
      this.getFunc(this.state.search, this.state.page);
    }
  }

  getFunc = (text, page) => {
    this.setState({ loading: true }); // activÄƒm indicatorul de Ã®ncÄƒrcare

    // ApelÄƒm funcÈ›ia getSearch, care face cererea cÄƒtre server.
    getSearch(text, page)
      .then(resp => resp.json()) // convertim Ã®n JSON
      .then(data => {
        // VerificÄƒm dacÄƒ rezultatele cÄƒutÄƒrii sunt goale.
        if (data.hits.length === 0) {
          this.setState({ empty: true }); // activÄƒm indicatorul care aratÄƒ cÄƒ rezultatele cÄƒutÄƒrii sunt goale
        }
        this.setState(prevSt => ({
          page: prevSt.page,
          images: [...prevSt.images, ...data.hits], // adÄƒugÄƒm imaginile noi la array
          total: data.total,
        }));
      })
      .catch(error => {
        this.setState({ error: error.message }); // Ã®nregistrÄƒm eroarea Ã®n state
      })
      .finally(() => {
        this.setState({ loading: false }); // dezactivÄƒm indicatorul de Ã®ncÄƒrcare
      });
  };

  // FuncÈ›ia apelatÄƒ la apÄƒsarea butonului "Load more".
  clickLoad = () => {
    this.setState(prevSt => ({
      page: prevSt.page + 1, // incrementÄƒm numÄƒrul paginii cu 1
    }));
  };

  // FuncÈ›ia apelatÄƒ la apÄƒsarea imaginii.
  openModal = (largeImageURL, alt) => {
    // Folosim setState cu o funcÈ›ie care primeÈ™te starea precedentÄƒ È™i returneazÄƒ una nouÄƒ.
    this.setState(({ showModal }) => {
      return { showModal: !showModal, largeImageURL, alt };
    });
  };

  // FuncÈ›ia apelatÄƒ la apÄƒsarea butonului "Search".
  handleSubmit = search => {
    // CurÄƒÈ›Äƒm array-ul de imagini, È™i stabilim valorile iniÈ›iale pentru pagina,
    // totalul imaginilor, indicatorii È™i erori.
    this.setState({
      search,
      images: [],
      page: 1,
      total: 1,
      loading: false,
      error: null,
      empty: false,
    });
  };

  // FuncÈ›ia apelatÄƒ la apÄƒsarea butonului "Close".
  closeModal = () => {
    // Folosim setState cu o funcÈ›ie care primeÈ™te starea precedentÄƒ È™i returneazÄƒ una nouÄƒ.
    this.setState(({ showModal }) => {
      return { showModal: !showModal };
    });
  };

  render() {
    const { error, loading, images, total, page } = this.state;
    return (
      <div>
        {/* Mesajele pop-up */}
        <Toaster
          toastOptions={{
            duration: 1500,
          }}
        />

        {/* bara de cÄƒutare */}
        <Searchbar handleSubmit={this.handleSubmit} />

        {/* VerificÄƒm dacÄƒ existÄƒ eroare */}
        {error && (
          <h2 style={{ textAlign: 'center' }}>
            Something went wrong: ({error})!
          </h2>
        )}

        {/* afiÈ™area listei de imagini */}
        <ImageGallery togleModal={this.openModal} images={images} />

        {/* VerificÄƒm dacÄƒ are loc Ã®ncÄƒrcarea */}
        {loading && <Loader />}

        {/* VerificÄƒm dacÄƒ rezultatele cÄƒutÄƒrii sunt goale */}
        {this.state.empty && (
          <h2 style={{ textAlign: 'center' }}>
            Sorry. There are no images ... ğŸ˜­
          </h2>
        )}

        {/* VerificÄƒm dacÄƒ trebuie afiÈ™at butonul "Load more" */}
        {total / 12 > page && <Button clickLoad={this.clickLoad} />}

        {/* VerificÄƒm dacÄƒ trebuie afiÈ™at modulul */}
        {this.state.showModal && (
          <Modal closeModal={this.closeModal}>
            <img src={this.state.largeImageURL} alt={this.state.alt} />
          </Modal>
        )}
      </div>
    );
  }
}
