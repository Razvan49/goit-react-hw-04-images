import React, { useState, useEffect } from 'react';
import { Toaster } from 'react-hot-toast'; // pentru afiÈ™area mesajelor pop-up
import { ImageGallery } from './ImageGallery/ImageGallery';
import { getSearch } from 'api/getSearch'; // pentru obÈ›inerea datelor de cÄƒutare
import { Searchbar } from './Searchbar/Searchbar'; // bara de cÄƒutare
import { Button } from 'components/Button/Button';
import { Loader } from 'components/Loader/Loader'; // indicator de Ã®ncÄƒrcare
import { Modal } from './Modal/Modal';

export const App = () => {
  const [search, setSearch] = useState('');
  const [images, setImages] = useState([]);
  const [page, setPage] = useState(1);
  const [total, setTotal] = useState(1);
  const [loading, setLoading] = useState(false); // indicator pentru Ã®ncÄƒrcare
  const [error, setError] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [modalImage, setModalImage] = useState({});
  const [empty, setEmpty] = useState(false); // indicator pentru rezultatele cÄƒutÄƒrii goale

  useEffect(() => {
    // VerificÄƒm dacÄƒ s-au modificat proprietÄƒÈ›ile search sau page.
    if (search !== '' && (page === 1 || page !== 1)) {
      setLoading(true); // activÄƒm indicatorul de Ã®ncÄƒrcare

      // ApelÄƒm funcÈ›ia getSearch, care face cererea cÄƒtre server.
      getSearch(search, page)
        .then(resp => resp.json()) // convertim Ã®n JSON
        .then(data => {
          // VerificÄƒm dacÄƒ rezultatele cÄƒutÄƒrii sunt goale.
          if (data.hits.length === 0) {
            setEmpty(true); // activÄƒm indicatorul care aratÄƒ cÄƒ rezultatele cÄƒutÄƒrii sunt goale
          }
          setImages(prevImages => [...prevImages, ...data.hits]); // adÄƒugÄƒm imaginile noi la array
          setTotal(data.total);
        })
        .catch(error => {
          setError(error.message); // Ã®nregistrÄƒm eroarea Ã®n state
        })
        .finally(() => {
          setLoading(false); // dezactivÄƒm indicatorul de Ã®ncÄƒrcare
        });
    }
  }, [search, page]);

  // FuncÈ›ia apelatÄƒ la apÄƒsarea butonului "Load more".
  const clickLoad = () => {
    setPage(prevPage => prevPage + 1); // incrementÄƒm numÄƒrul paginii cu 1
  };

  // FuncÈ›ia apelatÄƒ la apÄƒsarea imaginii.
  const openModal = (largeImageURL, alt) => {
    setShowModal(true);
    setModalImage({ largeImageURL, alt });
  };

  // FuncÈ›ia apelatÄƒ la apÄƒsarea butonului "Search".
  const handleSubmit = search => {
    // CurÄƒÈ›Äƒm array-ul de imagini, È™i stabilim valorile iniÈ›iale pentru pagina,
    // totalul imaginilor, indicatorii È™i erori.
    setSearch(search);
    setImages([]);
    setPage(1);
    setTotal(1);
    setLoading(false);
    setError(null);
    setEmpty(false);
  };

  // FuncÈ›ia apelatÄƒ la Ã®nchiderea modalului.
  const closeModal = () => {
    setShowModal(false);
  };

  return (
    <div>
      {/* Mesajele pop-up */}
      <Toaster
        toastOptions={{
          duration: 1500,
        }}
      />

      {/* bara de cÄƒutare */}
      <Searchbar handleSubmit={handleSubmit} />

      {/* VerificÄƒm dacÄƒ existÄƒ eroare */}
      {error && (
        <h2 style={{ textAlign: 'center' }}>
          Something went wrong: ({error})!
        </h2>
      )}

      {/* afiÈ™area listei de imagini */}
      <ImageGallery toggleModal={openModal} images={images} />

      {/* VerificÄƒm dacÄƒ are loc Ã®ncÄƒrcarea */}
      {loading && <Loader />}

      {/* VerificÄƒm dacÄƒ rezultatele cÄƒutÄƒrii sunt goale */}
      {empty && (
        <h2 style={{ textAlign: 'center' }}>
          Sorry. There are no images ... ğŸ˜­
        </h2>
      )}

      {/* VerificÄƒm dacÄƒ trebuie afiÈ™at butonul "Load more" */}
      {total / 12 > page && <Button clickLoad={clickLoad} />}

      {/* VerificÄƒm dacÄƒ trebuie afiÈ™at modulul */}
      {showModal && (
        <Modal closeModal={closeModal}>
          <img src={modalImage.largeImageURL} alt={modalImage.alt} />
        </Modal>
      )}
    </div>
  );
};
